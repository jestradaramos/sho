// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/cocktail.proto

package cocktail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CocktailServiceClient is the client API for CocktailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CocktailServiceClient interface {
	GetCocktail(ctx context.Context, in *GetCocktailRequest, opts ...grpc.CallOption) (*GetCocktailResponse, error)
	ListCocktails(ctx context.Context, in *ListCocktailsRequest, opts ...grpc.CallOption) (*ListCocktailsResponse, error)
	CreateCocktail(ctx context.Context, in *CreateCocktailRequest, opts ...grpc.CallOption) (*CreateCocktailResponse, error)
	UpdateCocktail(ctx context.Context, in *UpdateCocktailRequest, opts ...grpc.CallOption) (*UpdateCocktailResponse, error)
	DeleteCocktail(ctx context.Context, in *DeleteCocktailRequest, opts ...grpc.CallOption) (*DeleteCocktailResponse, error)
}

type cocktailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCocktailServiceClient(cc grpc.ClientConnInterface) CocktailServiceClient {
	return &cocktailServiceClient{cc}
}

func (c *cocktailServiceClient) GetCocktail(ctx context.Context, in *GetCocktailRequest, opts ...grpc.CallOption) (*GetCocktailResponse, error) {
	out := new(GetCocktailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CocktailService/GetCocktail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cocktailServiceClient) ListCocktails(ctx context.Context, in *ListCocktailsRequest, opts ...grpc.CallOption) (*ListCocktailsResponse, error) {
	out := new(ListCocktailsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CocktailService/ListCocktails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cocktailServiceClient) CreateCocktail(ctx context.Context, in *CreateCocktailRequest, opts ...grpc.CallOption) (*CreateCocktailResponse, error) {
	out := new(CreateCocktailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CocktailService/CreateCocktail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cocktailServiceClient) UpdateCocktail(ctx context.Context, in *UpdateCocktailRequest, opts ...grpc.CallOption) (*UpdateCocktailResponse, error) {
	out := new(UpdateCocktailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CocktailService/UpdateCocktail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cocktailServiceClient) DeleteCocktail(ctx context.Context, in *DeleteCocktailRequest, opts ...grpc.CallOption) (*DeleteCocktailResponse, error) {
	out := new(DeleteCocktailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CocktailService/DeleteCocktail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CocktailServiceServer is the server API for CocktailService service.
// All implementations should embed UnimplementedCocktailServiceServer
// for forward compatibility
type CocktailServiceServer interface {
	GetCocktail(context.Context, *GetCocktailRequest) (*GetCocktailResponse, error)
	ListCocktails(context.Context, *ListCocktailsRequest) (*ListCocktailsResponse, error)
	CreateCocktail(context.Context, *CreateCocktailRequest) (*CreateCocktailResponse, error)
	UpdateCocktail(context.Context, *UpdateCocktailRequest) (*UpdateCocktailResponse, error)
	DeleteCocktail(context.Context, *DeleteCocktailRequest) (*DeleteCocktailResponse, error)
}

// UnimplementedCocktailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCocktailServiceServer struct {
}

func (UnimplementedCocktailServiceServer) GetCocktail(context.Context, *GetCocktailRequest) (*GetCocktailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCocktail not implemented")
}
func (UnimplementedCocktailServiceServer) ListCocktails(context.Context, *ListCocktailsRequest) (*ListCocktailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCocktails not implemented")
}
func (UnimplementedCocktailServiceServer) CreateCocktail(context.Context, *CreateCocktailRequest) (*CreateCocktailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCocktail not implemented")
}
func (UnimplementedCocktailServiceServer) UpdateCocktail(context.Context, *UpdateCocktailRequest) (*UpdateCocktailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCocktail not implemented")
}
func (UnimplementedCocktailServiceServer) DeleteCocktail(context.Context, *DeleteCocktailRequest) (*DeleteCocktailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCocktail not implemented")
}

// UnsafeCocktailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CocktailServiceServer will
// result in compilation errors.
type UnsafeCocktailServiceServer interface {
	mustEmbedUnimplementedCocktailServiceServer()
}

func RegisterCocktailServiceServer(s grpc.ServiceRegistrar, srv CocktailServiceServer) {
	s.RegisterService(&CocktailService_ServiceDesc, srv)
}

func _CocktailService_GetCocktail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCocktailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CocktailServiceServer).GetCocktail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CocktailService/GetCocktail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CocktailServiceServer).GetCocktail(ctx, req.(*GetCocktailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CocktailService_ListCocktails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCocktailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CocktailServiceServer).ListCocktails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CocktailService/ListCocktails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CocktailServiceServer).ListCocktails(ctx, req.(*ListCocktailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CocktailService_CreateCocktail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCocktailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CocktailServiceServer).CreateCocktail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CocktailService/CreateCocktail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CocktailServiceServer).CreateCocktail(ctx, req.(*CreateCocktailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CocktailService_UpdateCocktail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCocktailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CocktailServiceServer).UpdateCocktail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CocktailService/UpdateCocktail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CocktailServiceServer).UpdateCocktail(ctx, req.(*UpdateCocktailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CocktailService_DeleteCocktail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCocktailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CocktailServiceServer).DeleteCocktail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CocktailService/DeleteCocktail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CocktailServiceServer).DeleteCocktail(ctx, req.(*DeleteCocktailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CocktailService_ServiceDesc is the grpc.ServiceDesc for CocktailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CocktailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.CocktailService",
	HandlerType: (*CocktailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCocktail",
			Handler:    _CocktailService_GetCocktail_Handler,
		},
		{
			MethodName: "ListCocktails",
			Handler:    _CocktailService_ListCocktails_Handler,
		},
		{
			MethodName: "CreateCocktail",
			Handler:    _CocktailService_CreateCocktail_Handler,
		},
		{
			MethodName: "UpdateCocktail",
			Handler:    _CocktailService_UpdateCocktail_Handler,
		},
		{
			MethodName: "DeleteCocktail",
			Handler:    _CocktailService_DeleteCocktail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cocktail.proto",
}
